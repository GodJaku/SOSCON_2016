#define uObjC_NATIVE_TYPE UIApplication
#define uObjC_UNO_TYPE_IS_SEALED 1
#define uObjC_UNO_TYPE ::app::iOS::UIKit::UIApplication*
#define uObjC_UNO_TYPE_OBJECT ::app::iOS::UIKit::UIApplication__typeof()

#include <UIKit/UIKit.h>
#include <uObjC.Wrapper.h>
#include <uObjC.Proxy.h>

#if !uObjC_UNO_TYPE_IS_SEALED
@implementation uObjC_PROXY


+ (UIApplication *) sharedApplication
{
    ::app::iOS::UIKit::UIApplication* __return = ::app::iOS::UIKit::UIApplication___sharedApplication(NULL);
    return uObjC::Lifetime::GetNativeHandle((::uObject *)__return);
}




























- (BOOL) openURL:(NSURL *)url
{
    uObjC_PROXY_FUNCTION_PROLOGUE
    bool __return = __this->openURL((::app::iOS::Foundation::NSURL*)uObjC::Lifetime::GetUnoObject(url, ::app::iOS::Foundation::NSURL__typeof()));
    return (BOOL)__return;
}
























































































































- (UIWindow *) keyWindow
{
    uObjC_PROXY_FUNCTION_PROLOGUE
    ::app::iOS::UIKit::UIWindow* __return = __this->keyWindow();
    return uObjC::Lifetime::GetNativeHandle((::uObject *)__return);
}































































- (UIInterfaceOrientation) statusBarOrientation
{
    uObjC_PROXY_FUNCTION_PROLOGUE
    int __return = __this->statusBarOrientation();
    return ::UIInterfaceOrientation(__return);
}



- (void) setStatusBarOrientation:(UIInterfaceOrientation)statusBarOrientation
{
    uObjC_PROXY_FUNCTION_PROLOGUE
    __this->setStatusBarOrientation(int(statusBarOrientation));
}
























































































































































































































































































































































@end
#endif // !uObjC_UNO_TYPE_IS_SEALED
